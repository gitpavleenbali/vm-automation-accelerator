/*
  Transform Layer - Input Normalization
  
  Purpose: Normalize and validate inputs into consistent local objects
  Pattern: SAP Automation Framework transform layer pattern
  
  Benefits:
  - Backward compatibility with different input formats
  - Default value handling
  - Input validation and sanitization
  - Consistent object structure for main.tf
*/

locals {
  # ============================================================================
  # Environment Configuration
  # ============================================================================
  
  environment = {
    # Environment name (dev, uat, prod, mgmt, etc.)
    name = lower(try(var.environment, "dev"))
    
    # Environment code (short form)
    code = lower(substr(try(var.environment, "dev"), 0, 4))
    
    # Tags specific to environment
    tags = merge(
      {
        Environment = title(try(var.environment, "dev"))
      },
      try(var.environment_tags, {})
    )
  }

  # ============================================================================
  # Location Configuration
  # ============================================================================
  
  location = {
    # Full location name
    name = lower(try(var.location, "eastus"))
    
    # Short location code (from naming module)
    code = try(var.location_code, "eus")
    
    # Display name for tags
    display_name = title(try(var.location, "eastus"))
  }

  # ============================================================================
  # Project Configuration
  # ============================================================================
  
  project = {
    # Project code (used in naming)
    code = lower(try(var.project_code, "vmaut"))
    
    # Project name (display)
    name = try(var.project_name, "VM Automation")
    
    # Owner information
    owner = try(var.owner, "Platform Team")
    
    # Cost center for chargeback
    cost_center = try(var.cost_center, "IT-OPS")
  }

  # ============================================================================
  # Resource Group Configuration
  # ============================================================================
  
  resource_group = {
    # Use existing resource group or create new
    use_existing = try(var.resource_group_name != null && var.resource_group_name != "", false)
    
    # Resource group name (custom or auto-generated)
    name = coalesce(
      try(var.resource_group_name, null),
      try(var.custom_resource_group_name, null),
      "" # Will be generated by naming module
    )
    
    # Resource group location (defaults to main location)
    location = coalesce(
      try(var.resource_group_location, null),
      try(var.location, "eastus")
    )
    
    # Resource group tags
    tags = merge(
      local.common_tags,
      try(var.resource_group_tags, {}),
      {
        Purpose = "Control Plane Infrastructure"
      }
    )
  }

  # ============================================================================
  # State Storage Configuration
  # ============================================================================
  
  state_storage = {
    # Storage account settings
    account = {
      # Storage account tier
      tier = upper(try(var.state_storage_account_tier, "Standard"))
      
      # Replication type
      replication = upper(try(var.state_storage_account_replication, "LRS"))
      
      # Enable versioning (recommended)
      enable_versioning = try(var.state_storage_enable_versioning, true)
      
      # Blob retention days
      blob_retention_days = try(var.state_storage_blob_retention_days, 30)
      
      # Container retention days
      container_retention_days = try(var.state_storage_container_retention_days, 30)
      
      # Access tier
      access_tier = try(var.state_storage_access_tier, "Hot")
      
      # Enable HTTPS only
      https_only = try(var.state_storage_https_only, true)
      
      # Minimum TLS version
      min_tls_version = try(var.state_storage_min_tls_version, "TLS1_2")
    }
    
    # Container settings
    container = {
      name = try(var.state_storage_container_name, "tfstate")
      access_type = try(var.state_storage_container_access_type, "private")
    }
    
    # Tags
    tags = merge(
      local.common_tags,
      try(var.state_storage_tags, {}),
      {
        Purpose = "Terraform State Storage"
        Criticality = "Critical"
      }
    )
  }

  # ============================================================================
  # Key Vault Configuration
  # ============================================================================
  
  key_vault = {
    # SKU
    sku = lower(try(var.key_vault_sku, "standard"))
    
    # Soft delete settings
    soft_delete_retention_days = try(var.key_vault_soft_delete_retention_days, 7)
    enable_purge_protection = try(var.key_vault_enable_purge_protection, true)
    
    # RBAC
    enable_rbac_authorization = try(var.key_vault_enable_rbac_authorization, true)
    
    # Network settings
    network = {
      # Default action for network rules
      default_action = try(var.key_vault_network_default_action, "Deny")
      
      # Bypass Azure services
      bypass = try(var.key_vault_network_bypass, "AzureServices")
      
      # Allowed IP addresses/CIDR ranges
      allowed_ips = try(var.key_vault_allowed_ip_addresses, [])
      
      # Virtual network subnet IDs
      subnet_ids = try(var.key_vault_subnet_ids, [])
    }
    
    # Advanced threat protection
    enable_advanced_threat_protection = try(var.key_vault_enable_advanced_threat_protection, false)
    
    # Tags
    tags = merge(
      local.common_tags,
      try(var.key_vault_tags, {}),
      {
        Purpose = "Secrets Management"
        Criticality = "Critical"
      }
    )
  }

  # ============================================================================
  # Deployment Metadata
  # ============================================================================
  
  deployment = {
    # Deployment type
    type = "bootstrap-control-plane"
    
    # Framework version
    framework_version = try(var.automation_version, "1.0.0")
    
    # Deployed by
    deployed_by = try(var.deployed_by, data.azurerm_client_config.current.object_id)
    
    # Deployment timestamp
    timestamp = timestamp()
    
    # Deployment ID (for tracking)
    id = try(var.deployment_id, formatdate("YYYYMMDDhhmmss", timestamp()))
  }

  # ============================================================================
  # Common Tags
  # ============================================================================
  
  common_tags = merge(
    {
      Environment     = local.environment.name
      Location        = local.location.display_name
      Project         = local.project.code
      ManagedBy       = "Terraform"
      Framework       = "VM-Automation-Accelerator"
      Version         = local.deployment.framework_version
      DeploymentType  = local.deployment.type
      DeployedBy      = local.deployment.deployed_by
      CostCenter      = local.project.cost_center
      Owner           = local.project.owner
    },
    try(var.common_tags, {}),
    try(var.tags, {})
  )

  # ============================================================================
  # Validation Flags
  # ============================================================================
  
  validation = {
    # Validate environment name
    valid_environment = contains(
      ["dev", "development", "uat", "test", "prod", "production", "mgmt", "management", "shared"],
      lower(var.environment)
    )
    
    # Validate location
    valid_location = length(var.location) > 0
    
    # Validate project code (3-8 characters, alphanumeric)
    valid_project_code = can(regex("^[a-z0-9]{3,8}$", lower(var.project_code)))
    
    # Validate storage tier
    valid_storage_tier = contains(["Standard", "Premium"], try(var.state_storage_account_tier, "Standard"))
    
    # Validate storage replication
    valid_storage_replication = contains(
      ["LRS", "GRS", "RAGRS", "ZRS", "GZRS", "RAGZRS"],
      try(var.state_storage_account_replication, "LRS")
    )
    
    # Validate Key Vault SKU
    valid_keyvault_sku = contains(["standard", "premium"], lower(try(var.key_vault_sku, "standard")))
    
    # Validate soft delete retention (7-90 days)
    valid_soft_delete_retention = (
      try(var.key_vault_soft_delete_retention_days, 7) >= 7 &&
      try(var.key_vault_soft_delete_retention_days, 7) <= 90
    )
  }

  # ============================================================================
  # Computed Values
  # ============================================================================
  
  computed = {
    # Resource group ID (for outputs)
    resource_group_id = local.resource_group.use_existing ? (
      data.azurerm_resource_group.existing[0].id
    ) : (
      azurerm_resource_group.control_plane[0].id
    )
    
    # Should create state storage
    create_state_storage = true # Always create for control plane
    
    # Should create key vault
    create_key_vault = true # Always create for control plane
    
    # Should create ARM deployment tracking
    create_arm_tracking = try(var.enable_arm_deployment_tracking, true)
  }
}

# ============================================================================
# Validation Checks (will fail plan if invalid)
# ============================================================================

# Validate environment
resource "null_resource" "validate_environment" {
  count = local.validation.valid_environment ? 0 : 1
  
  triggers = {
    error = "Invalid environment: ${var.environment}. Must be one of: dev, uat, prod, mgmt, shared"
  }
  
  lifecycle {
    precondition {
      condition     = local.validation.valid_environment
      error_message = "Invalid environment: ${var.environment}. Must be one of: dev, uat, prod, mgmt, shared"
    }
  }
}

# Validate project code
resource "null_resource" "validate_project_code" {
  count = local.validation.valid_project_code ? 0 : 1
  
  triggers = {
    error = "Invalid project_code: ${var.project_code}. Must be 3-8 alphanumeric characters"
  }
  
  lifecycle {
    precondition {
      condition     = local.validation.valid_project_code
      error_message = "Invalid project_code: ${var.project_code}. Must be 3-8 alphanumeric characters"
    }
  }
}

# Validate storage configuration
resource "null_resource" "validate_storage" {
  count = local.validation.valid_storage_tier && local.validation.valid_storage_replication ? 0 : 1
  
  triggers = {
    error = "Invalid storage configuration. Tier: ${try(var.state_storage_account_tier, "Standard")}, Replication: ${try(var.state_storage_account_replication, "LRS")}"
  }
  
  lifecycle {
    precondition {
      condition     = local.validation.valid_storage_tier && local.validation.valid_storage_replication
      error_message = "Invalid storage configuration. Check tier and replication values."
    }
  }
}

# Validate Key Vault configuration
resource "null_resource" "validate_keyvault" {
  count = local.validation.valid_keyvault_sku && local.validation.valid_soft_delete_retention ? 0 : 1
  
  triggers = {
    error = "Invalid Key Vault configuration. SKU: ${try(var.key_vault_sku, "standard")}, Retention: ${try(var.key_vault_soft_delete_retention_days, 7)}"
  }
  
  lifecycle {
    precondition {
      condition     = local.validation.valid_keyvault_sku && local.validation.valid_soft_delete_retention
      error_message = "Invalid Key Vault configuration. SKU must be standard/premium, retention 7-90 days."
    }
  }
}
