# Azure DevOps Pipeline: VM Restore from Snapshot or Backup
# This pipeline automates VM restoration from snapshots or Azure Backup
# Triggered via ServiceNow catalog or manual execution

trigger: none # Manual or ServiceNow-triggered only

parameters:
  - name: environment
    displayName: 'Environment'
    type: string
    default: 'prod'
    values:
      - dev
      - uat
      - prod
      
  - name: vmName
    displayName: 'VM Name (to restore)'
    type: string
    
  - name: resourceGroupName
    displayName: 'Resource Group Name'
    type: string
    
  - name: restoreType
    displayName: 'Restore Type'
    type: string
    default: 'snapshot'
    values:
      - snapshot      # Restore from disk snapshot
      - backup        # Restore from Azure Backup vault
      - create-new    # Create new VM from snapshot
      
  - name: snapshotName
    displayName: 'Snapshot Name (for snapshot restore)'
    type: string
    default: ''
    
  - name: recoveryPointId
    displayName: 'Recovery Point ID (for backup restore)'
    type: string
    default: ''
    
  - name: restorePointDateTime
    displayName: 'Restore Point Date/Time (if known)'
    type: string
    default: ''
    
  - name: targetVmName
    displayName: 'Target VM Name (for create-new restore)'
    type: string
    default: ''
    
  - name: overwriteExisting
    displayName: 'Overwrite Existing VM (for snapshot restore)'
    type: boolean
    default: false
    
  - name: serviceNowTicket
    displayName: 'ServiceNow Ticket Number (INC/RITM)'
    type: string
    default: ''
    
  - name: approverEmail
    displayName: 'L2 Approver Email'
    type: string
    default: ''
    
  - name: validateOnly
    displayName: 'Validation Only (no execution)'
    type: boolean
    default: false

variables:
  - name: azureServiceConnection
    value: 'AzureServiceConnection-Prod'
  - name: serviceNowApiUrl
    value: 'https://Your Organization.service-now.com/api/now'
  - name: backupVaultResourceGroup
    value: 'rg-backup-prod'
  - name: backupVaultName
    value: 'rsv-backup-prod'

stages:
  # ============================================================================
  # STAGE 1: PRE-RESTORE VALIDATION
  # ============================================================================
  - stage: PreRestoreValidation
    displayName: 'Pre-Restore Validation'
    jobs:
      - job: ValidateRestoreOptions
        displayName: 'Validate Restore Configuration'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Validate Restore Type & Parameters'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                RESTORE_TYPE="${{ parameters.restoreType }}"
                VM_NAME="${{ parameters.vmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                SNAPSHOT_NAME="${{ parameters.snapshotName }}"
                RECOVERY_POINT_ID="${{ parameters.recoveryPointId }}"
                TARGET_VM_NAME="${{ parameters.targetVmName }}"
                
                echo "Validating restore parameters..."
                echo "Restore Type: $RESTORE_TYPE"
                
                # Validate required parameters based on restore type
                if [ "$RESTORE_TYPE" == "snapshot" ]; then
                  if [ -z "$SNAPSHOT_NAME" ]; then
                    echo "##vso[task.logissue type=error]Snapshot name is required for snapshot restore"
                    exit 1
                  fi
                elif [ "$RESTORE_TYPE" == "backup" ]; then
                  if [ -z "$RECOVERY_POINT_ID" ]; then
                    echo "##vso[task.logissue type=error]Recovery point ID is required for backup restore"
                    exit 1
                  fi
                elif [ "$RESTORE_TYPE" == "create-new" ]; then
                  if [ -z "$SNAPSHOT_NAME" ] || [ -z "$TARGET_VM_NAME" ]; then
                    echo "##vso[task.logissue type=error]Snapshot name and target VM name required for create-new restore"
                    exit 1
                  fi
                fi
                
                echo "Parameter validation passed"
                
          - task: AzureCLI@2
            displayName: 'Get Current VM Configuration'
            condition: ne('${{ parameters.restoreType }}', 'create-new')
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                
                echo "Getting current VM configuration..."
                
                # Check if VM exists
                VM_EXISTS=$(az vm show --name "$VM_NAME" --resource-group "$RG_NAME" 2>/dev/null || echo "")
                
                if [ -z "$VM_EXISTS" ]; then
                  echo "##vso[task.logissue type=error]VM $VM_NAME not found in resource group $RG_NAME"
                  exit 1
                fi
                
                # Get VM details
                VM_ID=$(az vm show --name "$VM_NAME" --resource-group "$RG_NAME" --query "id" -o tsv)
                VM_SIZE=$(az vm show --name "$VM_NAME" --resource-group "$RG_NAME" --query "hardwareProfile.vmSize" -o tsv)
                VM_LOCATION=$(az vm show --name "$VM_NAME" --resource-group "$RG_NAME" --query "location" -o tsv)
                OS_DISK_NAME=$(az vm show --name "$VM_NAME" --resource-group "$RG_NAME" --query "storageProfile.osDisk.name" -o tsv)
                
                echo "Current VM ID: $VM_ID"
                echo "Current VM Size: $VM_SIZE"
                echo "VM Location: $VM_LOCATION"
                echo "OS Disk: $OS_DISK_NAME"
                
                echo "##vso[task.setvariable variable=currentVmId]$VM_ID"
                echo "##vso[task.setvariable variable=currentVmSize]$VM_SIZE"
                echo "##vso[task.setvariable variable=vmLocation]$VM_LOCATION"
                echo "##vso[task.setvariable variable=currentOsDiskName]$OS_DISK_NAME"
                
          - task: AzureCLI@2
            displayName: 'Validate Snapshot (if snapshot restore)'
            condition: or(eq('${{ parameters.restoreType }}', 'snapshot'), eq('${{ parameters.restoreType }}', 'create-new'))
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                SNAPSHOT_NAME="${{ parameters.snapshotName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                
                echo "Validating snapshot: $SNAPSHOT_NAME"
                
                # Check if snapshot exists
                SNAPSHOT_EXISTS=$(az snapshot show --name "$SNAPSHOT_NAME" --resource-group "$RG_NAME" 2>/dev/null || echo "")
                
                if [ -z "$SNAPSHOT_EXISTS" ]; then
                  echo "##vso[task.logissue type=error]Snapshot $SNAPSHOT_NAME not found"
                  exit 1
                fi
                
                # Get snapshot details
                SNAPSHOT_SIZE=$(az snapshot show --name "$SNAPSHOT_NAME" --resource-group "$RG_NAME" \
                  --query "diskSizeGb" -o tsv)
                SNAPSHOT_OS_TYPE=$(az snapshot show --name "$SNAPSHOT_NAME" --resource-group "$RG_NAME" \
                  --query "osType" -o tsv)
                SNAPSHOT_CREATION_DATE=$(az snapshot show --name "$SNAPSHOT_NAME" --resource-group "$RG_NAME" \
                  --query "timeCreated" -o tsv)
                
                echo "Snapshot Size: ${SNAPSHOT_SIZE}GB"
                echo "OS Type: $SNAPSHOT_OS_TYPE"
                echo "Created: $SNAPSHOT_CREATION_DATE"
                
                echo "##vso[task.setvariable variable=snapshotSizeGB]$SNAPSHOT_SIZE"
                echo "##vso[task.setvariable variable=snapshotOsType]$SNAPSHOT_OS_TYPE"
                echo "##vso[task.setvariable variable=snapshotCreationDate]$SNAPSHOT_CREATION_DATE"
                
                echo "Snapshot validation passed"
                
          - task: AzureCLI@2
            displayName: 'List Available Snapshots (if no snapshot specified)'
            condition: and(or(eq('${{ parameters.restoreType }}', 'snapshot'), eq('${{ parameters.restoreType }}', 'create-new')), eq('${{ parameters.snapshotName }}', ''))
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                OS_DISK_NAME="$(currentOsDiskName)"
                
                echo "Listing available snapshots for VM: $VM_NAME"
                
                # List snapshots for this VM's OS disk
                az snapshot list --resource-group "$RG_NAME" \
                  --query "[?contains(name, '$OS_DISK_NAME')].{Name:name, Size:diskSizeGb, Created:timeCreated, OSType:osType}" \
                  -o table
                
                echo ""
                echo "##vso[task.logissue type=warning]No snapshot specified. Please select a snapshot from the list above"
                
          - task: AzurePowerShell@5
            displayName: 'Validate Azure Backup Recovery Point (if backup restore)'
            condition: eq('${{ parameters.restoreType }}', 'backup')
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'inlineScript'
              inline: |
                $vmName = "${{ parameters.vmName }}"
                $vaultRg = "$(backupVaultResourceGroup)"
                $vaultName = "$(backupVaultName)"
                $recoveryPointId = "${{ parameters.recoveryPointId }}"
                
                Write-Host "Validating Azure Backup recovery point..."
                Write-Host "Vault: $vaultName"
                Write-Host "Recovery Point ID: $recoveryPointId"
                
                # Get backup container
                $container = Get-AzRecoveryServicesBackupContainer `
                  -VaultId (Get-AzRecoveryServicesVault -ResourceGroupName $vaultRg -Name $vaultName).ID `
                  -ContainerType "AzureVM" `
                  -Status "Registered" `
                  -FriendlyName $vmName
                
                if (-not $container) {
                  Write-Host "##vso[task.logissue type=error]VM $vmName not found in backup vault"
                  exit 1
                }
                
                # Get backup item
                $backupItem = Get-AzRecoveryServicesBackupItem `
                  -Container $container `
                  -WorkloadType "AzureVM" `
                  -VaultId (Get-AzRecoveryServicesVault -ResourceGroupName $vaultRg -Name $vaultName).ID
                
                if (-not $backupItem) {
                  Write-Host "##vso[task.logissue type=error]Backup item not found for VM $vmName"
                  exit 1
                }
                
                # List recovery points if no specific point provided
                if ([string]::IsNullOrEmpty($recoveryPointId)) {
                  Write-Host "Listing available recovery points..."
                  
                  $recoveryPoints = Get-AzRecoveryServicesBackupRecoveryPoint `
                    -Item $backupItem `
                    -VaultId (Get-AzRecoveryServicesVault -ResourceGroupName $vaultRg -Name $vaultName).ID `
                    | Select-Object -First 10
                  
                  $recoveryPoints | Format-Table RecoveryPointId, RecoveryPointTime, RecoveryPointType
                  
                  Write-Host "##vso[task.logissue type=warning]No recovery point ID specified"
                } else {
                  # Validate specific recovery point
                  $recoveryPoint = Get-AzRecoveryServicesBackupRecoveryPoint `
                    -Item $backupItem `
                    -RecoveryPointId $recoveryPointId `
                    -VaultId (Get-AzRecoveryServicesVault -ResourceGroupName $vaultRg -Name $vaultName).ID
                  
                  if (-not $recoveryPoint) {
                    Write-Host "##vso[task.logissue type=error]Recovery point $recoveryPointId not found"
                    exit 1
                  }
                  
                  Write-Host "Recovery point validated:"
                  Write-Host "  Time: $($recoveryPoint.RecoveryPointTime)"
                  Write-Host "  Type: $($recoveryPoint.RecoveryPointType)"
                }
              azurePowerShellVersion: 'LatestVersion'

      - job: CalculateRestoreImpact
        displayName: 'Calculate Restore Impact'
        dependsOn: ValidateRestoreOptions
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: PowerShell@2
            displayName: 'Create Restore Impact Report'
            inputs:
              targetType: 'inline'
              script: |
                $restoreType = "${{ parameters.restoreType }}"
                $overwrite = "${{ parameters.overwriteExisting }}"
                
                $impactReport = @{
                  RestoreType = $restoreType
                  VMName = "${{ parameters.vmName }}"
                  ResourceGroup = "${{ parameters.resourceGroupName }}"
                  SnapshotName = "${{ parameters.snapshotName }}"
                  RecoveryPointId = "${{ parameters.recoveryPointId }}"
                  TargetVMName = "${{ parameters.targetVmName }}"
                  OverwriteExisting = $overwrite
                  EstimatedDowntime = if ($restoreType -eq "create-new") { "None (new VM)" } else { "15-30 minutes" }
                  DataLossRisk = "Yes - all changes after snapshot/backup will be lost"
                  RollbackOption = if ($restoreType -eq "create-new") { "N/A (new VM)" } else { "Create snapshot of current state" }
                  ServiceNowTicket = "${{ parameters.serviceNowTicket }}"
                } | ConvertTo-Json -Depth 10
                
                Write-Host "Restore Impact Report:"
                Write-Host $impactReport
                
                $impactReport | Out-File -FilePath "$(Build.ArtifactStagingDirectory)/restore-impact-report.json"
                
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Impact Report'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/restore-impact-report.json'
              artifact: 'restore-impact-report'

  # ============================================================================
  # STAGE 2: APPROVAL
  # ============================================================================
  - stage: Approval
    displayName: 'Restore Approval'
    dependsOn: PreRestoreValidation
    condition: and(succeeded(), eq('${{ parameters.validateOnly }}', false))
    jobs:
      - job: ManualApproval
        displayName: 'L2 Approval Required'
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: 'Approve VM Restore'
            inputs:
              notifyUsers: '${{ parameters.approverEmail }}'
              instructions: |
                ⚠️ **CRITICAL: VM RESTORE OPERATION** ⚠️
                
                Please review and approve the VM restore operation:
                
                **VM Details:**
                - VM Name: ${{ parameters.vmName }}
                - Resource Group: ${{ parameters.resourceGroupName }}
                - Environment: ${{ parameters.environment }}
                
                **Restore Configuration:**
                - Restore Type: ${{ parameters.restoreType }}
                - Snapshot: ${{ parameters.snapshotName }}
                - Recovery Point: ${{ parameters.recoveryPointId }}
                - Target VM: ${{ parameters.targetVmName }}
                - Overwrite Existing: ${{ parameters.overwriteExisting }}
                
                **⚠️ CRITICAL WARNINGS:**
                1. **DATA LOSS**: All changes after the snapshot/backup point WILL BE LOST
                2. **DOWNTIME**: VM will be unavailable for 15-30 minutes (if overwrite)
                3. **IRREVERSIBLE**: This operation cannot be easily undone
                
                **ServiceNow Ticket:** ${{ parameters.serviceNowTicket }}
                
                **Before approving, confirm:**
                - [ ] Business justification documented
                - [ ] Stakeholders notified of data loss
                - [ ] Maintenance window approved
                - [ ] Alternative solutions considered
                
                Review the restore impact report artifact for detailed analysis.
              onTimeout: 'reject'

  # ============================================================================
  # STAGE 3: PRE-RESTORE BACKUP
  # ============================================================================
  - stage: PreRestoreBackup
    displayName: 'Pre-Restore Safety Backup'
    dependsOn: Approval
    condition: and(succeeded(), ne('${{ parameters.restoreType }}', 'create-new'))
    jobs:
      - job: CreateSafetySnapshot
        displayName: 'Create Pre-Restore Snapshot'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Snapshot Current State'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                OS_DISK_NAME="$(currentOsDiskName)"
                TIMESTAMP=$(date +%Y%m%d-%H%M%S)
                
                echo "Creating pre-restore safety snapshot..."
                
                SAFETY_SNAPSHOT_NAME="${OS_DISK_NAME}-pre-restore-${TIMESTAMP}"
                
                az snapshot create \
                  --name "$SAFETY_SNAPSHOT_NAME" \
                  --resource-group "$RG_NAME" \
                  --source "$OS_DISK_NAME" \
                  --tags "Operation=PreRestoreBackup" "OriginalVM=$VM_NAME" "Ticket=${{ parameters.serviceNowTicket }}"
                
                echo "Safety snapshot created: $SAFETY_SNAPSHOT_NAME"
                echo "##vso[task.setvariable variable=safetySnapshotName]$SAFETY_SNAPSHOT_NAME"

  # ============================================================================
  # STAGE 4: EXECUTION - SNAPSHOT RESTORE
  # ============================================================================
  - stage: ExecuteSnapshotRestore
    displayName: 'Execute Snapshot Restore'
    dependsOn: 
      - Approval
      - PreRestoreBackup
    condition: |
      and(
        in(dependencies.Approval.result, 'Succeeded', 'Skipped'),
        in(dependencies.PreRestoreBackup.result, 'Succeeded', 'Skipped'),
        or(eq('${{ parameters.restoreType }}', 'snapshot'), eq('${{ parameters.restoreType }}', 'create-new'))
      )
    jobs:
      - job: RestoreFromSnapshot
        displayName: 'Restore VM from Snapshot'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Stop VM (if overwrite)'
            condition: and(eq('${{ parameters.overwriteExisting }}', true), ne('${{ parameters.restoreType }}', 'create-new'))
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                
                echo "Stopping VM..."
                az vm deallocate --name "$VM_NAME" --resource-group "$RG_NAME"
                
          - task: AzureCLI@2
            displayName: 'Create Managed Disk from Snapshot'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                SNAPSHOT_NAME="${{ parameters.snapshotName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                VM_LOCATION="$(vmLocation)"
                TIMESTAMP=$(date +%Y%m%d-%H%M%S)
                
                echo "Creating managed disk from snapshot..."
                
                RESTORED_DISK_NAME="disk-restored-${TIMESTAMP}"
                
                SNAPSHOT_ID=$(az snapshot show --name "$SNAPSHOT_NAME" --resource-group "$RG_NAME" --query "id" -o tsv)
                
                az disk create \
                  --name "$RESTORED_DISK_NAME" \
                  --resource-group "$RG_NAME" \
                  --location "$VM_LOCATION" \
                  --source "$SNAPSHOT_ID" \
                  --sku Premium_LRS
                
                echo "Restored disk created: $RESTORED_DISK_NAME"
                echo "##vso[task.setvariable variable=restoredDiskName]$RESTORED_DISK_NAME"
                
          - task: AzureCLI@2
            displayName: 'Swap OS Disk (if overwrite existing)'
            condition: and(eq('${{ parameters.overwriteExisting }}', true), ne('${{ parameters.restoreType }}', 'create-new'))
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                RESTORED_DISK_NAME="$(restoredDiskName)"
                
                echo "Swapping OS disk..."
                
                RESTORED_DISK_ID=$(az disk show --name "$RESTORED_DISK_NAME" --resource-group "$RG_NAME" --query "id" -o tsv)
                
                az vm update \
                  --name "$VM_NAME" \
                  --resource-group "$RG_NAME" \
                  --os-disk "$RESTORED_DISK_ID"
                
                echo "OS disk swapped successfully"
                
          - task: AzureCLI@2
            displayName: 'Create New VM from Restored Disk (if create-new)'
            condition: eq('${{ parameters.restoreType }}', 'create-new')
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                TARGET_VM_NAME="${{ parameters.targetVmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                VM_SIZE="$(currentVmSize)"
                VM_LOCATION="$(vmLocation)"
                RESTORED_DISK_NAME="$(restoredDiskName)"
                
                echo "Creating new VM from restored disk..."
                
                RESTORED_DISK_ID=$(az disk show --name "$RESTORED_DISK_NAME" --resource-group "$RG_NAME" --query "id" -o tsv)
                
                az vm create \
                  --name "$TARGET_VM_NAME" \
                  --resource-group "$RG_NAME" \
                  --location "$VM_LOCATION" \
                  --size "$VM_SIZE" \
                  --attach-os-disk "$RESTORED_DISK_ID" \
                  --os-type "$(snapshotOsType)" \
                  --tags "RestoredFrom=${{ parameters.snapshotName }}" "Ticket=${{ parameters.serviceNowTicket }}"
                
                echo "New VM created: $TARGET_VM_NAME"
                
          - task: AzureCLI@2
            displayName: 'Start VM'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                if [ "${{ parameters.restoreType }}" == "create-new" ]; then
                  VM_NAME="${{ parameters.targetVmName }}"
                fi
                
                RG_NAME="${{ parameters.resourceGroupName }}"
                
                echo "Starting VM: $VM_NAME"
                az vm start --name "$VM_NAME" --resource-group "$RG_NAME"

  # ============================================================================
  # STAGE 5: EXECUTION - AZURE BACKUP RESTORE
  # ============================================================================
  - stage: ExecuteBackupRestore
    displayName: 'Execute Azure Backup Restore'
    dependsOn:
      - Approval
      - PreRestoreBackup
    condition: |
      and(
        in(dependencies.Approval.result, 'Succeeded', 'Skipped'),
        in(dependencies.PreRestoreBackup.result, 'Succeeded', 'Skipped'),
        eq('${{ parameters.restoreType }}', 'backup')
      )
    jobs:
      - job: RestoreFromBackup
        displayName: 'Restore VM from Azure Backup'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzurePowerShell@5
            displayName: 'Trigger Backup Restore'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'inlineScript'
              inline: |
                $vmName = "${{ parameters.vmName }}"
                $rgName = "${{ parameters.resourceGroupName }}"
                $vaultRg = "$(backupVaultResourceGroup)"
                $vaultName = "$(backupVaultName)"
                $recoveryPointId = "${{ parameters.recoveryPointId }}"
                
                Write-Host "Initiating Azure Backup restore..."
                
                $vault = Get-AzRecoveryServicesVault -ResourceGroupName $vaultRg -Name $vaultName
                
                $container = Get-AzRecoveryServicesBackupContainer `
                  -VaultId $vault.ID `
                  -ContainerType "AzureVM" `
                  -FriendlyName $vmName
                
                $backupItem = Get-AzRecoveryServicesBackupItem `
                  -Container $container `
                  -WorkloadType "AzureVM" `
                  -VaultId $vault.ID
                
                $recoveryPoint = Get-AzRecoveryServicesBackupRecoveryPoint `
                  -Item $backupItem `
                  -RecoveryPointId $recoveryPointId `
                  -VaultId $vault.ID
                
                # Restore to original location
                Write-Host "Starting restore job to original location..."
                
                $restoreJob = Restore-AzRecoveryServicesBackupItem `
                  -RecoveryPoint $recoveryPoint `
                  -VaultId $vault.ID `
                  -VaultLocation $vault.Location `
                  -RestoreToSecondaryRegion:$false
                
                Write-Host "Restore job started: $($restoreJob.JobId)"
                Write-Host "##vso[task.setvariable variable=restoreJobId]$($restoreJob.JobId)"
                
                # Wait for restore to complete (can take 30+ minutes)
                Write-Host "Waiting for restore to complete (this may take 30+ minutes)..."
                
                $jobCompleted = $false
                $maxWaitMinutes = 60
                $startTime = Get-Date
                
                while (-not $jobCompleted) {
                  Start-Sleep -Seconds 60
                  
                  $job = Get-AzRecoveryServicesBackupJob -JobId $restoreJob.JobId -VaultId $vault.ID
                  
                  $elapsedMinutes = ((Get-Date) - $startTime).TotalMinutes
                  Write-Host "[$([math]::Round($elapsedMinutes, 1)) min] Job Status: $($job.Status)"
                  
                  if ($job.Status -eq "Completed") {
                    $jobCompleted = $true
                    Write-Host "Restore completed successfully"
                  }
                  elseif ($job.Status -eq "Failed" -or $job.Status -eq "Cancelled") {
                    Write-Host "##vso[task.logissue type=error]Restore job $($job.Status): $($job.ErrorDetails)"
                    exit 1
                  }
                  elseif ($elapsedMinutes -gt $maxWaitMinutes) {
                    Write-Host "##vso[task.logissue type=error]Restore job timeout after $maxWaitMinutes minutes"
                    exit 1
                  }
                }
              azurePowerShellVersion: 'LatestVersion'

  # ============================================================================
  # STAGE 6: POST-RESTORE VALIDATION
  # ============================================================================
  - stage: PostRestoreValidation
    displayName: 'Post-Restore Validation'
    dependsOn:
      - ExecuteSnapshotRestore
      - ExecuteBackupRestore
    condition: |
      or(
        in(dependencies.ExecuteSnapshotRestore.result, 'Succeeded'),
        in(dependencies.ExecuteBackupRestore.result, 'Succeeded')
      )
    jobs:
      - job: ValidateRestore
        displayName: 'Validate Restored VM'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Verify VM is Running'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                if [ "${{ parameters.restoreType }}" == "create-new" ]; then
                  VM_NAME="${{ parameters.targetVmName }}"
                fi
                
                RG_NAME="${{ parameters.resourceGroupName }}"
                
                echo "Validating restored VM: $VM_NAME"
                
                # Check VM power state
                POWER_STATE=$(az vm get-instance-view --name "$VM_NAME" --resource-group "$RG_NAME" \
                  --query "instanceView.statuses[?starts_with(code, 'PowerState/')].displayStatus" -o tsv)
                
                echo "VM Power State: $POWER_STATE"
                
                if [[ "$POWER_STATE" != *"running"* ]]; then
                  echo "##vso[task.logissue type=error]VM is not running"
                  exit 1
                fi
                
                echo "✅ VM is running"
                
          - task: AzureCLI@2
            displayName: 'Verify OS Disk'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                if [ "${{ parameters.restoreType }}" == "create-new" ]; then
                  VM_NAME="${{ parameters.targetVmName }}"
                fi
                
                RG_NAME="${{ parameters.resourceGroupName }}"
                
                # Get OS disk info
                OS_DISK_NAME=$(az vm show --name "$VM_NAME" --resource-group "$RG_NAME" \
                  --query "storageProfile.osDisk.name" -o tsv)
                OS_DISK_SIZE=$(az disk show --name "$OS_DISK_NAME" --resource-group "$RG_NAME" \
                  --query "diskSizeGb" -o tsv)
                
                echo "OS Disk: $OS_DISK_NAME"
                echo "Disk Size: ${OS_DISK_SIZE}GB"
                
                echo "✅ OS disk verified"

  # ============================================================================
  # STAGE 7: NOTIFICATION
  # ============================================================================
  - stage: Notification
    displayName: 'Notification & Documentation'
    dependsOn: PostRestoreValidation
    condition: always()
    jobs:
      - job: UpdateDocumentation
        displayName: 'Update Restore Records'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: PowerShell@2
            displayName: 'Create Restore Report'
            inputs:
              targetType: 'inline'
              script: |
                $status = if ($env:AGENT_JOBSTATUS -eq "Succeeded") { "Success" } else { "Failed" }
                
                $restoreReport = @{
                  VMName = "${{ parameters.vmName }}"
                  TargetVMName = "${{ parameters.targetVmName }}"
                  ResourceGroup = "${{ parameters.resourceGroupName }}"
                  Environment = "${{ parameters.environment }}"
                  RestoreType = "${{ parameters.restoreType }}"
                  SnapshotName = "${{ parameters.snapshotName }}"
                  RecoveryPointId = "${{ parameters.recoveryPointId }}"
                  OverwriteExisting = "${{ parameters.overwriteExisting }}"
                  ServiceNowTicket = "${{ parameters.serviceNowTicket }}"
                  Status = $status
                  RestoredDiskName = "$(restoredDiskName)"
                  SafetySnapshotName = "$(safetySnapshotName)"
                  ExecutedAt = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
                  ExecutedBy = "$env:BUILD_REQUESTEDFOR"
                } | ConvertTo-Json -Depth 10
                
                Write-Host "Restore Report:"
                Write-Host $restoreReport
                
                $restoreReport | Out-File -FilePath "$(Build.ArtifactStagingDirectory)/restore-report.json"
                
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Restore Report'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/restore-report.json'
              artifact: 'restore-report'
              
          - task: PowerShell@2
            displayName: 'Update ServiceNow Ticket'
            condition: ne('${{ parameters.serviceNowTicket }}', '')
            inputs:
              targetType: 'inline'
              script: |
                $ticket = "${{ parameters.serviceNowTicket }}"
                $status = if ($env:AGENT_JOBSTATUS -eq "Succeeded") { "Completed" } else { "Failed" }
                
                Write-Host "Updating ServiceNow ticket $ticket with status: $status"
                
                # TODO: Add actual ServiceNow API call
                # PATCH $(serviceNowApiUrl)/table/incident/$ticket
                
                Write-Host "ServiceNow ticket updated"
