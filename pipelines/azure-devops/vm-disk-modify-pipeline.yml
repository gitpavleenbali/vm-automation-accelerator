# Azure DevOps Pipeline: VM Disk Modification
# This pipeline automates disk operations (add, resize, delete) for existing VMs
# Triggered via ServiceNow catalog or manual execution

trigger: none # Manual or ServiceNow-triggered only

parameters:
  - name: environment
    displayName: 'Environment'
    type: string
    default: 'prod'
    values:
      - dev
      - uat
      - prod
      
  - name: vmName
    displayName: 'VM Name'
    type: string
    
  - name: resourceGroupName
    displayName: 'Resource Group Name'
    type: string
    
  - name: operation
    displayName: 'Disk Operation'
    type: string
    default: 'add'
    values:
      - add      # Add new data disk
      - resize   # Resize existing disk
      - delete   # Detach and delete disk
      
  - name: diskName
    displayName: 'Disk Name'
    type: string
    default: ''
    
  - name: diskSizeGB
    displayName: 'Disk Size (GB)'
    type: number
    default: 128
    
  - name: diskLUN
    displayName: 'Disk LUN (0-63)'
    type: number
    default: 0
    
  - name: storageType
    displayName: 'Storage Account Type'
    type: string
    default: 'Premium_LRS'
    values:
      - Standard_LRS
      - StandardSSD_LRS
      - Premium_LRS
      - PremiumV2_LRS
      - UltraSSD_LRS
      
  - name: caching
    displayName: 'Disk Caching'
    type: string
    default: 'ReadOnly'
    values:
      - None
      - ReadOnly
      - ReadWrite
      
  - name: serviceNowTicket
    displayName: 'ServiceNow Ticket Number'
    type: string
    default: ''
    
  - name: approverEmail
    displayName: 'L2 Approver Email'
    type: string
    default: ''

variables:
  - name: azureServiceConnection
    value: 'AzureServiceConnection-Prod'
  - name: serviceNowApiUrl
    value: 'https://Your Organization.service-now.com/api/now'
  - name: maxDiskSizeGB
    value: 32767 # Azure maximum
  - name: maxDisksPerVM
    value: 64

stages:
  # ============================================================================
  # STAGE 1: VALIDATION & PRE-CHECKS
  # ============================================================================
  - stage: Validation
    displayName: 'Validation & Pre-Checks'
    jobs:
      - job: ValidateInputs
        displayName: 'Validate Inputs & VM State'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Validate VM Exists & Get State'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Validating VM: ${{ parameters.vmName }}"
                
                # Check if VM exists
                VM_EXISTS=$(az vm show --name "${{ parameters.vmName }}" \
                  --resource-group "${{ parameters.resourceGroupName }}" \
                  --query "name" -o tsv 2>/dev/null || echo "")
                
                if [ -z "$VM_EXISTS" ]; then
                  echo "##vso[task.logissue type=error]VM ${{ parameters.vmName }} not found in resource group ${{ parameters.resourceGroupName }}"
                  exit 1
                fi
                
                # Get VM power state
                POWER_STATE=$(az vm get-instance-view --name "${{ parameters.vmName }}" \
                  --resource-group "${{ parameters.resourceGroupName }}" \
                  --query "instanceView.statuses[?starts_with(code, 'PowerState/')].displayStatus" -o tsv)
                
                echo "VM Power State: $POWER_STATE"
                echo "##vso[task.setvariable variable=vmPowerState]$POWER_STATE"
                
                # Get current disk count
                DISK_COUNT=$(az vm show --name "${{ parameters.vmName }}" \
                  --resource-group "${{ parameters.resourceGroupName }}" \
                  --query "length(storageProfile.dataDisks)" -o tsv)
                
                echo "Current Data Disks: $DISK_COUNT"
                echo "##vso[task.setvariable variable=currentDiskCount]$DISK_COUNT"
                
                # Validate operation-specific conditions
                case "${{ parameters.operation }}" in
                  "add")
                    if [ $DISK_COUNT -ge $(maxDisksPerVM) ]; then
                      echo "##vso[task.logissue type=error]VM has maximum number of disks ($DISK_COUNT)"
                      exit 1
                    fi
                    
                    if [ ${{ parameters.diskSizeGB }} -gt $(maxDiskSizeGB) ]; then
                      echo "##vso[task.logissue type=error]Disk size exceeds maximum ($(maxDiskSizeGB) GB)"
                      exit 1
                    fi
                    ;;
                    
                  "resize"|"delete")
                    if [ -z "${{ parameters.diskName }}" ]; then
                      echo "##vso[task.logissue type=error]Disk name required for ${{ parameters.operation }} operation"
                      exit 1
                    fi
                    
                    # Check if disk exists and is attached
                    DISK_ATTACHED=$(az vm show --name "${{ parameters.vmName }}" \
                      --resource-group "${{ parameters.resourceGroupName }}" \
                      --query "storageProfile.dataDisks[?name=='${{ parameters.diskName }}'].name" -o tsv)
                    
                    if [ -z "$DISK_ATTACHED" ]; then
                      echo "##vso[task.logissue type=error]Disk ${{ parameters.diskName }} not attached to VM"
                      exit 1
                    fi
                    
                    if [ "${{ parameters.operation }}" == "resize" ]; then
                      CURRENT_SIZE=$(az disk show --name "${{ parameters.diskName }}" \
                        --resource-group "${{ parameters.resourceGroupName }}" \
                        --query "diskSizeGb" -o tsv)
                      
                      echo "Current disk size: $CURRENT_SIZE GB"
                      
                      if [ ${{ parameters.diskSizeGB }} -le $CURRENT_SIZE ]; then
                        echo "##vso[task.logissue type=error]New size must be larger than current size ($CURRENT_SIZE GB)"
                        exit 1
                      fi
                    fi
                    ;;
                esac
                
                echo "Validation passed"
                
          - task: PowerShell@2
            displayName: 'Validate ServiceNow Ticket'
            condition: ne('${{ parameters.serviceNowTicket }}', '')
            inputs:
              targetType: 'inline'
              script: |
                $ticket = "${{ parameters.serviceNowTicket }}"
                
                # Validate ticket format (RITM, CHG, INC)
                if ($ticket -notmatch '^(RITM|CHG|INC)\d{7}$') {
                  Write-Host "##vso[task.logissue type=error]Invalid ServiceNow ticket format: $ticket"
                  exit 1
                }
                
                # TODO: Add actual ServiceNow API validation
                Write-Host "ServiceNow ticket validated: $ticket"

      - job: CalculateImpact
        displayName: 'Calculate Cost & Performance Impact'
        dependsOn: ValidateInputs
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzurePowerShell@5
            displayName: 'Calculate Cost Impact'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'inlineScript'
              inline: |
                $operation = "${{ parameters.operation }}"
                $diskSizeGB = ${{ parameters.diskSizeGB }}
                $storageType = "${{ parameters.storageType }}"
                
                # Approximate monthly cost per GB (USD)
                $costPerGB = switch ($storageType) {
                  "Standard_LRS"    { 0.05 }
                  "StandardSSD_LRS" { 0.10 }
                  "Premium_LRS"     { 0.15 }
                  "PremiumV2_LRS"   { 0.20 }
                  "UltraSSD_LRS"    { 0.25 }
                  default           { 0.15 }
                }
                
                $monthlyCost = $diskSizeGB * $costPerGB
                
                Write-Host "Operation: $operation"
                Write-Host "Disk Size: $diskSizeGB GB"
                Write-Host "Storage Type: $storageType"
                Write-Host "Estimated Monthly Cost Impact: `$$monthlyCost USD"
                
                # Set output variable
                Write-Host "##vso[task.setvariable variable=estimatedCost]$monthlyCost"
                
                # Create cost report
                $costReport = @{
                  Operation = $operation
                  DiskSizeGB = $diskSizeGB
                  StorageType = $storageType
                  MonthlyCost = $monthlyCost
                } | ConvertTo-Json
                
                $costReport | Out-File -FilePath "$(Build.ArtifactStagingDirectory)/cost-impact.json"
              azurePowerShellVersion: 'LatestVersion'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Cost Impact Report'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/cost-impact.json'
              artifact: 'cost-impact-report'

  # ============================================================================
  # STAGE 2: APPROVAL
  # ============================================================================
  - stage: Approval
    displayName: 'L2 Approval'
    dependsOn: Validation
    condition: succeeded()
    jobs:
      - job: ManualApproval
        displayName: 'Wait for L2 Approval'
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: 'Approve Disk Operation'
            inputs:
              notifyUsers: '${{ parameters.approverEmail }}'
              instructions: |
                Please review and approve the disk modification:
                
                - VM Name: ${{ parameters.vmName }}
                - Resource Group: ${{ parameters.resourceGroupName }}
                - Operation: ${{ parameters.operation }}
                - Disk Name: ${{ parameters.diskName }}
                - Disk Size: ${{ parameters.diskSizeGB }} GB
                - Storage Type: ${{ parameters.storageType }}
                - ServiceNow Ticket: ${{ parameters.serviceNowTicket }}
                
                Estimated Monthly Cost Impact: $(estimatedCost) USD
              onTimeout: 'reject'

  # ============================================================================
  # STAGE 3: EXECUTION
  # ============================================================================
  - stage: Execution
    displayName: 'Execute Disk Operation'
    dependsOn: Approval
    condition: succeeded()
    jobs:
      - job: ExecuteDiskOperation
        displayName: 'Perform Disk ${{ parameters.operation }}'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Create Snapshot (Backup)'
            condition: or(eq('${{ parameters.operation }}', 'resize'), eq('${{ parameters.operation }}', 'delete'))
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                DISK_NAME="${{ parameters.diskName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                SNAPSHOT_NAME="${DISK_NAME}-snapshot-$(date +%Y%m%d-%H%M%S)"
                
                echo "Creating snapshot: $SNAPSHOT_NAME"
                
                DISK_ID=$(az disk show --name "$DISK_NAME" --resource-group "$RG_NAME" --query "id" -o tsv)
                
                az snapshot create \
                  --name "$SNAPSHOT_NAME" \
                  --resource-group "$RG_NAME" \
                  --source "$DISK_ID" \
                  --tags "Operation=${{ parameters.operation }}" "Ticket=${{ parameters.serviceNowTicket }}" "CreatedBy=Pipeline"
                
                echo "Snapshot created: $SNAPSHOT_NAME"
                echo "##vso[task.setvariable variable=snapshotName]$SNAPSHOT_NAME"
                
          - task: AzureCLI@2
            displayName: 'Add New Disk'
            condition: eq('${{ parameters.operation }}', 'add')
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                DISK_NAME="${{ parameters.diskName }}"
                
                # Generate disk name if not provided
                if [ -z "$DISK_NAME" ]; then
                  DISK_NAME="${VM_NAME}-datadisk-lun${{ parameters.diskLUN }}"
                fi
                
                echo "Adding disk: $DISK_NAME"
                
                # Create managed disk
                az disk create \
                  --name "$DISK_NAME" \
                  --resource-group "$RG_NAME" \
                  --size-gb ${{ parameters.diskSizeGB }} \
                  --sku "${{ parameters.storageType }}" \
                  --tags "AttachedTo=$VM_NAME" "Environment=${{ parameters.environment }}" "Ticket=${{ parameters.serviceNowTicket }}"
                
                # Attach disk to VM
                az vm disk attach \
                  --vm-name "$VM_NAME" \
                  --resource-group "$RG_NAME" \
                  --name "$DISK_NAME" \
                  --lun ${{ parameters.diskLUN }} \
                  --caching "${{ parameters.caching }}"
                
                echo "Disk attached successfully"
                
          - task: AzureCLI@2
            displayName: 'Resize Disk'
            condition: eq('${{ parameters.operation }}', 'resize')
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                DISK_NAME="${{ parameters.diskName }}"
                NEW_SIZE=${{ parameters.diskSizeGB }}
                
                echo "Resizing disk: $DISK_NAME to ${NEW_SIZE} GB"
                
                # Deallocate VM (required for disk resize)
                echo "Deallocating VM..."
                az vm deallocate --name "$VM_NAME" --resource-group "$RG_NAME"
                
                # Resize disk
                az disk update \
                  --name "$DISK_NAME" \
                  --resource-group "$RG_NAME" \
                  --size-gb $NEW_SIZE
                
                # Restart VM
                echo "Starting VM..."
                az vm start --name "$VM_NAME" --resource-group "$RG_NAME"
                
                echo "Disk resized successfully. Remember to extend partition/filesystem inside OS."
                
          - task: AzureCLI@2
            displayName: 'Delete Disk'
            condition: eq('${{ parameters.operation }}', 'delete')
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                DISK_NAME="${{ parameters.diskName }}"
                
                echo "Detaching and deleting disk: $DISK_NAME"
                
                # Detach disk from VM
                az vm disk detach \
                  --vm-name "$VM_NAME" \
                  --resource-group "$RG_NAME" \
                  --name "$DISK_NAME"
                
                echo "Disk detached"
                
                # Wait 30 seconds for detachment to complete
                sleep 30
                
                # Delete disk
                az disk delete \
                  --name "$DISK_NAME" \
                  --resource-group "$RG_NAME" \
                  --yes
                
                echo "Disk deleted successfully"

  # ============================================================================
  # STAGE 4: VERIFICATION
  # ============================================================================
  - stage: Verification
    displayName: 'Post-Operation Verification'
    dependsOn: Execution
    condition: succeeded()
    jobs:
      - job: VerifyOperation
        displayName: 'Verify Disk Operation'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Verify Disk State'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                VM_NAME="${{ parameters.vmName }}"
                RG_NAME="${{ parameters.resourceGroupName }}"
                
                echo "Verifying disk configuration..."
                
                # Get VM disk configuration
                az vm show \
                  --name "$VM_NAME" \
                  --resource-group "$RG_NAME" \
                  --query "storageProfile.dataDisks[].[name, diskSizeGb, lun, caching, managedDisk.storageAccountType]" \
                  -o table
                
                # Verify VM is running
                POWER_STATE=$(az vm get-instance-view --name "$VM_NAME" \
                  --resource-group "$RG_NAME" \
                  --query "instanceView.statuses[?starts_with(code, 'PowerState/')].displayStatus" -o tsv)
                
                echo "VM Power State: $POWER_STATE"
                
                if [[ "$POWER_STATE" != *"running"* ]] && [ "${{ parameters.operation }}" != "resize" ]; then
                  echo "##vso[task.logissue type=warning]VM is not running"
                fi

  # ============================================================================
  # STAGE 5: NOTIFICATION
  # ============================================================================
  - stage: Notification
    displayName: 'Update ServiceNow & Notify'
    dependsOn: Verification
    condition: always()
    jobs:
      - job: UpdateTicket
        displayName: 'Update ServiceNow Ticket'
        condition: ne('${{ parameters.serviceNowTicket }}', '')
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: PowerShell@2
            displayName: 'Update SNOW Ticket'
            inputs:
              targetType: 'inline'
              script: |
                $ticket = "${{ parameters.serviceNowTicket }}"
                $status = if ($env:AGENT_JOBSTATUS -eq "Succeeded") { "Completed" } else { "Failed" }
                
                Write-Host "Updating ServiceNow ticket $ticket with status: $status"
                
                # TODO: Add actual ServiceNow API call
                # POST $(serviceNowApiUrl)/table/change_request
                
                Write-Host "ServiceNow ticket updated"
