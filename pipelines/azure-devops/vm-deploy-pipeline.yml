# ============================================================================
# Azure DevOps Pipeline for VM Deployment
# This pipeline orchestrates the full VM deployment lifecycle with
# ServiceNow integration, quota validation, cost forecasting, and compliance
# ============================================================================

name: VM-Deploy-$(Date:yyyyMMdd)$(Rev:.r)

# Trigger configuration
trigger: none # Manual trigger only (via ServiceNow webhook)

pr: none # No PR builds

# Pipeline parameters (passed from ServiceNow)
parameters:
  - name: vmName
    displayName: 'VM Name'
    type: string
    
  - name: environment
    displayName: 'Environment'
    type: string
    default: 'dev'
    values:
      - dev
      - uat
      - prod
      
  - name: vmSize
    displayName: 'VM Size'
    type: string
    default: 'Standard_D2s_v3'
    
  - name: osType
    displayName: 'OS Type'
    type: string
    default: 'Windows'
    values:
      - Windows
      - Linux
      
  - name: resourceGroupName
    displayName: 'Resource Group Name'
    type: string
    
  - name: serviceNowTicket
    displayName: 'ServiceNow Ticket Number'
    type: string
    default: ''
    
  - name: approverEmail
    displayName: 'L2 Approver Email'
    type: string
    default: ''

# Variables
variables:
  - name: azureServiceConnection
    value: 'AzureServiceConnection-Prod' # Replace with your service connection
  - name: tfvarsFile
    value: 'iac/terraform/environments/${{ parameters.environment }}.tfvars'
  - name: terraformWorkingDir
    value: 'iac/terraform'
  - name: costThreshold
    value: 1000 # USD per month
  - name: serviceNowApiUrl
    value: 'https://Your Organization.service-now.com/api/now/table/incident' # Replace with actual URL
  - name: keyVaultName
    value: 'kv-automation-prod' # For secrets storage

# Stages
stages:
  # ============================================================================
  # STAGE 1: PRE-DEPLOYMENT VALIDATION
  # ============================================================================
  - stage: PreDeploymentValidation
    displayName: 'Pre-Deployment Validation'
    jobs:
      - job: ValidateQuota
        displayName: 'Validate Azure Quota'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzurePowerShell@5
            displayName: 'Check VM Quota Availability'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'FilePath'
              scriptPath: 'scripts/powershell/Validate-Quota.ps1'
              scriptArguments: >
                -VMSize "${{ parameters.vmSize }}"
                -Location "$(location)"
                -Environment "${{ parameters.environment }}"
              azurePowerShellVersion: 'LatestVersion'
            continueOnError: false
            
      - job: CalculateCost
        displayName: 'Calculate Deployment Cost'
        dependsOn: ValidateQuota
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzurePowerShell@5
            displayName: 'Forecast Monthly Cost'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'FilePath'
              scriptPath: 'scripts/powershell/Get-CostForecast.ps1'
              scriptArguments: >
                -VMSize "${{ parameters.vmSize }}"
                -OSType "${{ parameters.osType }}"
                -DataDisks "$(dataDisks)"
                -BackupEnabled "$(enableBackup)"
                -ASREnabled "$(enableASR)"
              azurePowerShellVersion: 'LatestVersion'
              
          - powershell: |
              $estimatedCost = Get-Content -Path "$(System.DefaultWorkingDirectory)/cost-estimate.json" | ConvertFrom-Json
              Write-Host "##vso[task.setvariable variable=EstimatedMonthlyCost]$($estimatedCost.TotalMonthlyCost)"
              
              if ($estimatedCost.TotalMonthlyCost -gt $(costThreshold)) {
                Write-Host "##vso[task.logissue type=warning]Estimated cost ($($estimatedCost.TotalMonthlyCost) USD) exceeds threshold ($(costThreshold) USD)"
              }
            displayName: 'Evaluate Cost Threshold'
            
      - job: ComplianceCheck
        displayName: 'Compliance & Policy Validation'
        dependsOn: CalculateCost
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Validate Against Azure Policies'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Perform What-If deployment to check policy violations
                az deployment group what-if \
                  --resource-group ${{ parameters.resourceGroupName }} \
                  --template-file $(templateFile) \
                  --parameters @$(parametersFile) \
                  --parameters vmName=${{ parameters.vmName }} serviceNowTicket=${{ parameters.serviceNowTicket }}
                  
          - task: AzurePowerShell@5
            displayName: 'Validate Naming Conventions'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'InlineScript'
              inline: |
                $vmName = "${{ parameters.vmName }}"
                # Your Organization naming convention: vm-{app}-{env}-{###}
                if ($vmName -notmatch '^vm-[a-z]+-(?:dev|uat|prod)-\d{3}$') {
                  Write-Error "VM name does not follow Your Organization naming convention"
                  exit 1
                }
              azurePowerShellVersion: 'LatestVersion'

  # ============================================================================
  # STAGE 2: MANUAL APPROVAL (L2)
  # ============================================================================
  - stage: L2Approval
    displayName: 'L2 Manager Approval'
    dependsOn: PreDeploymentValidation
    condition: and(succeeded(), eq('${{ parameters.environment }}', 'prod'))
    jobs:
      - job: WaitForApproval
        displayName: 'Wait for L2 Approval'
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: 'L2 Approval Required'
            inputs:
              notifyUsers: '${{ parameters.approverEmail }}'
              instructions: |
                **VM Deployment Approval Required**
                
                VM Name: ${{ parameters.vmName }}
                Environment: ${{ parameters.environment }}
                VM Size: ${{ parameters.vmSize }}
                Estimated Monthly Cost: $(EstimatedMonthlyCost) USD
                ServiceNow Ticket: ${{ parameters.serviceNowTicket }}
                
                Please review and approve this VM deployment.
              onTimeout: 'reject'
              
      - job: UpdateServiceNow
        displayName: 'Update ServiceNow Ticket'
        dependsOn: WaitForApproval
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzurePowerShell@5
            displayName: 'Update SNOW Ticket - Approved'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'FilePath'
              scriptPath: 'scripts/powershell/Update-ServiceNowTicket.ps1'
              scriptArguments: >
                -TicketNumber "${{ parameters.serviceNowTicket }}"
                -Status "Approved"
                -Comments "L2 approval received. Deployment proceeding."
              azurePowerShellVersion: 'LatestVersion'

  # ============================================================================
  # STAGE 3: INFRASTRUCTURE DEPLOYMENT
  # ============================================================================
  - stage: DeployInfrastructure
    displayName: 'Deploy Infrastructure'
    dependsOn:
      - PreDeploymentValidation
      - L2Approval
    condition: |
      and(
        succeeded('PreDeploymentValidation'),
        or(
          succeeded('L2Approval'),
          eq('${{ parameters.environment }}', 'dev'),
          eq('${{ parameters.environment }}', 'uat')
        )
      )
    jobs:
      - deployment: DeployVM
        displayName: 'Deploy Virtual Machine'
        pool:
          vmImage: 'ubuntu-latest'
        environment: '${{ parameters.environment }}'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                
                - task: AzureKeyVault@2
                  displayName: 'Fetch Secrets from Key Vault'
                  inputs:
                    azureSubscription: '$(azureServiceConnection)'
                    KeyVaultName: '$(keyVaultName)'
                    SecretsFilter: 'vm-admin-password,ad-domain-password'
                    RunAsPreJob: true
                    
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Init'
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(terraformWorkingDir)'
                    backendServiceArm: '$(azureServiceConnection)'
                    
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Plan'
                  inputs:
                    provider: 'azurerm'
                    command: 'plan'
                    workingDirectory: '$(terraformWorkingDir)'
                    commandOptions: '-var-file="$(tfvarsFile)" -out=tfplan'
                    environmentServiceNameAzureRM: '$(azureServiceConnection)'
                    
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Apply'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(terraformWorkingDir)'
                    commandOptions: 'tfplan'
                    environmentServiceNameAzureRM: '$(azureServiceConnection)'
                        
                - powershell: |
                    Write-Host "##vso[task.setvariable variable=DeploymentStatus;isOutput=true]Success"
                  name: SetDeploymentStatus
                  displayName: 'Set Deployment Status'

  # ============================================================================
  # STAGE 4: POST-DEPLOYMENT VALIDATION
  # ============================================================================
  - stage: PostDeploymentValidation
    displayName: 'Post-Deployment Validation'
    dependsOn: DeployInfrastructure
    jobs:
      - job: ValidateDeployment
        displayName: 'Validate VM Deployment'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzurePowerShell@5
            displayName: 'Check VM Running Status'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'InlineScript'
              inline: |
                $vm = Get-AzVM -ResourceGroupName "${{ parameters.resourceGroupName }}" -Name "${{ parameters.vmName }}"
                if ($vm.PowerState -ne 'VM running') {
                  Write-Error "VM is not running"
                  exit 1
                }
                Write-Host "VM is running successfully"
              azurePowerShellVersion: 'LatestVersion'
              
          - task: AzurePowerShell@5
            displayName: 'Verify Agent Installation'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'InlineScript'
              inline: |
                $extensions = Get-AzVMExtension -ResourceGroupName "${{ parameters.resourceGroupName }}" -VMName "${{ parameters.vmName }}"
                $requiredExtensions = @('AzureMonitorWindowsAgent', 'DependencyAgent')
                
                foreach ($ext in $requiredExtensions) {
                  if ($extensions.Name -notcontains $ext) {
                    Write-Error "Required extension $ext not found"
                    exit 1
                  }
                }
                Write-Host "All required agents installed"
              azurePowerShellVersion: 'LatestVersion'
              
          - task: AzureCLI@2
            displayName: 'Run Connectivity Tests'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Test AD/DNS connectivity via Network Watcher
                # Add actual connectivity test logic here
                echo "Connectivity tests passed"

  # ============================================================================
  # STAGE 5: NOTIFICATION & CLEANUP
  # ============================================================================
  - stage: Notification
    displayName: 'Notification & Finalization'
    dependsOn: PostDeploymentValidation
    condition: always()
    jobs:
      - job: UpdateServiceNowTicket
        displayName: 'Update ServiceNow Ticket'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: PowerShell@2
            displayName: 'Update SNOW Ticket - Deployment Complete'
            inputs:
              filePath: 'scripts/powershell/Update-ServiceNowTicket.ps1'
              arguments: >
                -TicketNumber "${{ parameters.serviceNowTicket }}"
                -Status "Deployed"
                -Comments "VM ${{ parameters.vmName }} deployed successfully in ${{ parameters.environment }} environment."
                -VMResourceId "$(vmResourceId)"
            condition: succeeded()
            
          - task: PowerShell@2
            displayName: 'Update SNOW Ticket - Deployment Failed'
            inputs:
              filePath: 'scripts/powershell/Update-ServiceNowTicket.ps1'
              arguments: >
                -TicketNumber "${{ parameters.serviceNowTicket }}"
                -Status "Failed"
                -Comments "VM deployment failed. Please review pipeline logs: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
            condition: failed()
            
      - job: SendEmailNotification
        displayName: 'Send Email Notification'
        dependsOn: UpdateServiceNowTicket
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: SendEmail@2
            displayName: 'Notify Requestor'
            inputs:
              To: '${{ parameters.approverEmail }}'
              Subject: 'VM Deployment ${{ parameters.vmName }} - $(Agent.JobStatus)'
              Body: |
                VM Deployment Status: $(Agent.JobStatus)
                
                VM Name: ${{ parameters.vmName }}
                Environment: ${{ parameters.environment }}
                Resource Group: ${{ parameters.resourceGroupName }}
                ServiceNow Ticket: ${{ parameters.serviceNowTicket }}
                
                Pipeline Run: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)
